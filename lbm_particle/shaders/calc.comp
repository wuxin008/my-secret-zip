#version 450
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_atomic_float : enable

#define D 3
#define Q 19
#define def_c 0.57735027f

#define def_w0 (1.0f/3.0f ) // center (0)
#define def_ws (1.0f/18.0f) // straight (1-6)
#define def_we (1.0f/36.0f) // edge (7-18)

#define TYPE_S  0x01 // 0b00000001 // (stationary or moving) solid boundary
#define TYPE_E  0x02 // 0b00000010 // equilibrium boundary (inflow/outflow)
#define TYPE_T  0x04 // 0b00000100 // temperature boundary
#define TYPE_F  0x08 // 0b00001000 // fluid
#define TYPE_I  0x10 // 0b00010000 // interface
#define TYPE_G  0x20 // 0b00100000 // gas
#define TYPE_X  0x40 // 0b01000000 // reserved type X
#define TYPE_Y  0x80 // 0b10000000 // reserved type Y

#define TYPE_MS 0x03 // 0b00000011 // cell next to moving solid boundary
#define TYPE_BO 0x03 // 0b00000011 // any flag bit used for boundaries (temperature excluded)
#define TYPE_IF 0x18 // 0b00011000 // change from interface to fluid
#define TYPE_IG 0x30 // 0b00110000 // change from interface to gas
#define TYPE_GI 0x38 // 0b00111000 // change from gas to interface
#define TYPE_SU 0x38 // 0b00111000 // any flag bit used for SURFACE

#define fma(a, b, c) ((a)*(b)+(c))
#define load(p,o) p[o]
#define store(p,o,x) p[o]=x
float w[Q] = {
    1.0f /  3.0f,
    1.0f / 18.0f,
    1.0f / 18.0f,
    1.0f / 18.0f,
    1.0f / 18.0f,
    1.0f / 18.0f,
    1.0f / 18.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
    1.0f / 36.0f,
};

ivec3 e[Q] = {
    { 0,  0,  0},
    { 1,  0,  0},
    {-1,  0,  0},
    { 0,  1,  0},
    { 0, -1,  0},
    { 0,  0,  1},
    { 0,  0, -1},
    { 1,  1,  0},
    {-1, -1,  0},
    { 1,  0,  1},
    {-1,  0, -1},
    { 0,  1,  1},
    { 0, -1, -1},
    { 1, -1,  0},
    {-1,  1,  0},
    { 1,  0, -1},
    {-1,  0,  1},
    { 0,  1, -1},
    { 0, -1,  1},
};

struct Particle {
	vec4 position;
    vec4 color;
};

layout (std430, binding = 0) uniform SimulateUBO {
    uint Nx;
    uint Ny;
    uint Nz;
    uint Nxyz;
    uint particleCount;
    float particleRho;
    float niu;
    float tau;
    float inv_tau;
    float fx;
    float fy;
    float fz;
    uint t;
} ubo;

layout(std430, binding = 1) buffer Particles {
   Particle particles[];
};

layout(std430, binding = 2) buffer Velocity {
    float vels[];
};

layout(std430, binding = 3) buffer Rho {
    float rhos[];
};

layout(std430, binding = 4) buffer Flag {
    uint flags[];
};

layout(std430, binding = 5) buffer DDF {
    float ddfs[];
};

layout(std430, binding = 6) buffer BorderForce {
    float bfs[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

uint index_f(uint n, uint i) {
    return i * ubo.Nxyz + n;
}

int c(const uint i) {
    return e[i % Q][i / Q];
}

float sq(float x) {
    return pow(x, 2);
}

uvec3 coordinates(const uint n) { // disassemble 1D index to 3D coordinates (n -> x,y,z)
	const uint t = uint(n%(ubo.Nx*ubo.Ny));
	return uvec3(t%ubo.Nx, t/ubo.Nx, uint(n/(ubo.Nx*ubo.Ny))); // n = x+(y+z*Ny)*Nx
}

void calculate_indices(uint n, inout uint x0, inout uint xp, inout uint xm, inout uint y0, inout uint yp, inout uint ym, inout uint z0, inout uint zp, inout uint zm) {
    const uvec3 xyz = coordinates(n);
	x0 = uint(    xyz.x                                        ); // pre-calculate indices (periodic boundary conditions)
	xp = uint(  ((xyz.x       +1u)%ubo.Nx)                     );
	xm = uint(  ((xyz.x+ubo.Nx-1u)%ubo.Nx)                     );
	y0 = uint(   (xyz.y                   *ubo.Nx)             );
	yp = uint( (((xyz.y       +1u)%ubo.Ny)*ubo.Nx)             );
	ym = uint( (((xyz.y+ubo.Ny-1u)%ubo.Ny)*ubo.Nx)             );
	z0 = uint(    xyz.z                   *uint(ubo.Ny*ubo.Nx) );
	zp = uint(  ((xyz.z       +1u)%ubo.Nz)*uint(ubo.Ny*ubo.Nx) );
	zm = uint(  ((xyz.z+ubo.Nz-1u)%ubo.Nz)*uint(ubo.Ny*ubo.Nx) );
}

void neighbors(uint index, inout uint nbs[Q]) {
    uint x0, xp, xm, y0, yp, ym, z0, zp, zm;
	calculate_indices(index, x0, xp, xm, y0, yp, ym, z0, zp, zm);
	nbs[ 0] = index;
    nbs[ 1] = xp+y0+z0; nbs[ 2] = xm+y0+z0; // +00 -00
	nbs[ 3] = x0+yp+z0; nbs[ 4] = x0+ym+z0; // 0+0 0-0
	nbs[ 5] = x0+y0+zp; nbs[ 6] = x0+y0+zm; // 00+ 00-
	nbs[ 7] = xp+yp+z0; nbs[ 8] = xm+ym+z0; // ++0 --0
	nbs[ 9] = xp+y0+zp; nbs[10] = xm+y0+zm; // +0+ -0-
	nbs[11] = x0+yp+zp; nbs[12] = x0+ym+zm; // 0++ 0--
	nbs[13] = xp+ym+z0; nbs[14] = xm+yp+z0; // +-0 -+0
	nbs[15] = xp+y0+zm; nbs[16] = xm+y0+zp; // +0- -0+
	nbs[17] = x0+yp+zm; nbs[18] = x0+ym+zp; // 0+- 0-+
}

void load_f(uint n, inout float fhn[Q], uint nbs[Q], uint t) {
    fhn[0] = load(ddfs, index_f(n, 0u)); // Esoteric-Pull
	for(uint q = 1u; q < Q; q += 2u) {
		fhn[q   ] = load(ddfs, index_f(n     , t%2u!=0 ? q    : q+1u));
		fhn[q+1u] = load(ddfs, index_f(nbs[q], t%2u!=0 ? q+1u : q   ));
	}
}

void store_f(uint n, inout float fhn[Q], uint nbs[Q], uint t) {
    store(ddfs, index_f(n, 0u), fhn[0]); // Esoteric-Pull
	for(uint q = 1u; q < Q; q += 2u) {
		store(ddfs, index_f(n     , t%2u!=0 ? q    : q+1u), fhn[q+1u]);
		store(ddfs, index_f(nbs[q], t%2u!=0 ? q+1u : q   ), fhn[q   ]);
	}
}

void apply_moving_boundaries(inout float fhn[Q], const uint nbs[Q]) {
    uint ji; // reads velocities of only neighboring boundary cells, which do not change during simulation
	for(uint q = 1u; q < Q; q += 2u) { // loop is entirely unrolled by compiler, no unnecessary memory access is happening
		float w6 = -6.0f*w[q]; // w6 = -2*w_i*rho_wall/c^2, w(i) = w(i+1) if i is odd, rho_wall is assumed as rho_avg=1 (necessary choice to assure mass conservation)
		ji = nbs[q+1u]; fhn[q   ] = (flags[ji]&TYPE_BO)==TYPE_S ? fma(w6, c(q+1u)*vels[ji]+c(Q+q+1u)*vels[ubo.Nxyz+ji]+c(2u*Q+q+1u)*vels[2u*ubo.Nxyz+ji], fhn[q   ]) : fhn[q   ]; // boundary : regular
		ji = nbs[q   ]; fhn[q+1u] = (flags[ji]&TYPE_BO)==TYPE_S ? fma(w6, c(q   )*vels[ji]+c(Q+q   )*vels[ubo.Nxyz+ji]+c(2u*Q+q   )*vels[2u*ubo.Nxyz+ji], fhn[q+1u]) : fhn[q+1u];
	}
}

void calculate_rho_u(const float f[Q], inout float rhon, inout float uxn, inout float uyn, inout float uzn) {
    float rho=f[0], ux, uy, uz;
    for(uint q=1u; q<Q; q++) rho += f[q]; // calculate density from fi
	rho += 1.0f; // add 1.0f last to avoid digit extinction effects when summing up fi (perturbation method / DDF-shifting)
    ux = f[ 1]-f[ 2]+f[ 7]-f[ 8]+f[ 9]-f[10]+f[13]-f[14]+f[15]-f[16];
    uy = f[ 3]-f[ 4]+f[ 7]-f[ 8]+f[11]-f[12]+f[14]-f[13]+f[17]-f[18];
    uz = f[ 5]-f[ 6]+f[ 9]-f[10]+f[11]-f[12]+f[16]-f[15]+f[18]-f[17];
    rhon = rho;
    uxn = ux/rho;
    uyn = uy/rho;
    uzn = uz/rho;
}

void calculate_forcing_terms(const float ux, const float uy, const float uz, const float fx, const float fy, const float fz, inout float Fin[Q]) {
    const float uF = -0.33333334f*fma(ux, fx, fma(uy, fy, uz*fz)); // 3D
    Fin[0] = 9.0f*def_w0*uF ; // 000 (identical for all velocity sets)
	for(uint q=1u; q<Q; q++) { // loop is entirely unrolled by compiler, no unnecessary FLOPs are happening
		Fin[q] = 9.0f*w[q]*fma(c(q)*fx+c(Q+q)*fy+c(2u*Q+q)*fz, c(q)*ux+c(Q+q)*uy+c(2u*Q+q)*uz+0.33333334f, uF);
	}
}

void calculate_f_eq(float rho, float ux, float uy, float uz, inout float feq[Q]) {
    const float rhom1 = rho-1.0f; // rhom1 is arithmetic optimization to minimize digit extinction
    const float c3 = -3.0f*(sq(ux)+sq(uy)+sq(uz)); // c3 = -2*sq(u)/(2*sq(c))
	uz *= 3.0f; // only needed for 3D
    ux *= 3.0f;
	uy *= 3.0f;
	feq[ 0] = w[0]*fma(rho, 0.5f*c3, rhom1); // 000 (identical for all velocity sets)
    const float u0=ux+uy, u1=ux+uz, u2=uy+uz, u3=ux-uy, u4=ux-uz, u5=uy-uz;
	const float rhos=def_ws*rho, rhoe=def_we*rho, rhom1s=def_ws*rhom1, rhom1e=def_we*rhom1;
	feq[ 1] = fma(rhos, fma(0.5f, fma(ux, ux, c3), ux), rhom1s); feq[ 2] = fma(rhos, fma(0.5f, fma(ux, ux, c3), -ux), rhom1s); // +00 -00
	feq[ 3] = fma(rhos, fma(0.5f, fma(uy, uy, c3), uy), rhom1s); feq[ 4] = fma(rhos, fma(0.5f, fma(uy, uy, c3), -uy), rhom1s); // 0+0 0-0
	feq[ 5] = fma(rhos, fma(0.5f, fma(uz, uz, c3), uz), rhom1s); feq[ 6] = fma(rhos, fma(0.5f, fma(uz, uz, c3), -uz), rhom1s); // 00+ 00-
	feq[ 7] = fma(rhoe, fma(0.5f, fma(u0, u0, c3), u0), rhom1e); feq[ 8] = fma(rhoe, fma(0.5f, fma(u0, u0, c3), -u0), rhom1e); // ++0 --0
	feq[ 9] = fma(rhoe, fma(0.5f, fma(u1, u1, c3), u1), rhom1e); feq[10] = fma(rhoe, fma(0.5f, fma(u1, u1, c3), -u1), rhom1e); // +0+ -0-
	feq[11] = fma(rhoe, fma(0.5f, fma(u2, u2, c3), u2), rhom1e); feq[12] = fma(rhoe, fma(0.5f, fma(u2, u2, c3), -u2), rhom1e); // 0++ 0--
	feq[13] = fma(rhoe, fma(0.5f, fma(u3, u3, c3), u3), rhom1e); feq[14] = fma(rhoe, fma(0.5f, fma(u3, u3, c3), -u3), rhom1e); // +-0 -+0
	feq[15] = fma(rhoe, fma(0.5f, fma(u4, u4, c3), u4), rhom1e); feq[16] = fma(rhoe, fma(0.5f, fma(u4, u4, c3), -u4), rhom1e); // +0- -0+
	feq[17] = fma(rhoe, fma(0.5f, fma(u5, u5, c3), u5), rhom1e); feq[18] = fma(rhoe, fma(0.5f, fma(u5, u5, c3), -u5), rhom1e); // 0+- 0-+
}

vec3 trilinear3(const vec3 p, const vec3 v[8]) { // trilinear interpolation, p: position in unit cube, v: corner vectors in unit cube
	const float x1=p.x, y1=p.y, z1=p.z, x0=1.0f-x1, y0=1.0f-y1, z0=1.0f-z1; // calculate interpolation factors
	return (x0*y0*z0)*v[0]+(x1*y0*z0)*v[1]+(x1*y0*z1)*v[2]+(x0*y0*z1)*v[3]+(x0*y1*z0)*v[4]+(x1*y1*z0)*v[5]+(x1*y1*z1)*v[6]+(x0*y1*z1)*v[7]; // perform trilinear interpolation
}

vec3 load3(uint n) {
    return vec3(vels[n], vels[n + ubo.Nxyz], vels[n + 2u*ubo.Nxyz]);
}

//vec3 interpolate_u(const vec3 p) { // trilinear interpolation of velocity at point p
//	const float xa=p.x-0.5f+1.5f*float(ubo.Nx), ya=p.y-0.5f+1.5f*float(ubo.Ny), za=p.z-0.5f+1.5f*float(ubo.Nz); // subtract lattice offsets
//	const uint xb=uint(xa), yb=uint(ya), zb=uint(za); // integer casting to find bottom left corner
//	const vec3 pn = vec3(xa-float(xb), ya-float(yb), za-float(zb)); // calculate interpolation factors
//	vec3 un[8]; // velocitiy at unit cube corner points
//	for(uint c=0u; c<8u; c++) { // count over eight corner points
//		const uint i=(c&0x04u)>>2, j=(c&0x02u)>>1, k=c&0x01u; // disassemble c into corner indices ijk
//		const uint x=(xb+i)%ubo.Nx, y=(yb+j)%ubo.Ny, z=(zb+k)%ubo.Nz; // calculate corner lattice positions
//		const uint n = uint(x)+uint(y+z*ubo.Ny)*uint(ubo.Nx); // calculate lattice linear index
//		un[c] = load3(n); // load velocity from lattice point
//	}
//	return trilinear3(pn, un); // perform trilinear interpolation
//}

vec3 interpolate_u(vec3 pos) {
    ivec3 lattice = ivec3(pos);
    vec3 factor = pos - lattice;

    vec3 u[8];
    for (uint a = 0; a < 8; ++a) {
        uint i = (a & 0x04u) >> 2, j=(a & 0x02u) >> 1, k = a & 0x01u;
        uint x = lattice.x + i, y = lattice.y + j, z = lattice.z + k;
        uint n = x + (y + z * ubo.Ny) * ubo.Nx;
        u[a] = vec3(vels[n], vels[n + ubo.Nxyz], vels[n + 2u * ubo.Nxyz]);
    }
    return trilinear3(factor, u);
}

//vec3 particle_boundary_force(const vec3 p) { // normalized pseudo-force to prevent particles from entering solid boundaries or exiting fluid phase
//	const float xa=p.x-0.5f+1.5f*float(ubo.Nx), ya=p.y-0.5f+1.5f*float(ubo.Ny), za=p.z-0.5f+1.5f*float(ubo.Nz); // subtract lattice offsets
//	const uint xb=uint(xa), yb=uint(ya), zb=uint(za); // integer casting to find bottom left corner
//	const float x1=xa-float(xb), y1=ya-float(yb), z1=za-float(zb); // calculate interpolation factors
//	vec3 boundary_force = vec3(0.0f, 0.0f, 0.0f);
//	float boundary_distance = 2.0f;
//	for(uint c=0u; c<8u; c++) { // count over eight corner points
//		const uint i=(c&0x04u)>>2, j=(c&0x02u)>>1, k=c&0x01u; // disassemble c into corner indices ijk
//		const uint x=(xb+i)%ubo.Nx, y=(yb+j)%ubo.Ny, z=(zb+k)%ubo.Nz; // calculate corner lattice positions
//		const uint n = uint(x)+uint(y+z*ubo.Ny)+uint(ubo.Nx); // calculate lattice linear index
//		if((flags[n]&(TYPE_S|TYPE_G)) != 0) {
//			boundary_force += vec3(0.5f, 0.5f, 0.5f)-vec3(i, j, k);
//			boundary_distance = min(boundary_distance, length(vec3(x1, y1, z1)-vec3(i, j, k)));
//		}
//	}
//	const float particle_radius = 0.5f; // has to be between 0.0f and 0.5f, default: 0.5f (hydrodynamic radius)
//	return length(boundary_force) > 1e-6 && boundary_distance-0.5f<particle_radius ? normalize(boundary_force) : vec3(0.0f, 0.0f, 0.0f);
//} // particle_boundary_force()

vec3 particle_boundary_force(vec3 pos) {
    ivec3 lattice = ivec3(pos);
    vec3 factor = pos - vec3(lattice);

    vec3 force = vec3(0.0f);
    float distance = 2.0f;
    for (uint q = 1; q < Q; ++q){
        ivec3 nb = e[q] + lattice;
        if (nb.x <= 0 || nb.x >= ubo.Nx - 1) {
            force.x = lattice.x - nb.x;
        }
        if (nb.y <= 0 || nb.y >= ubo.Ny - 1) {
            force.y = lattice.y - nb.y;
        }
        if (nb.z <= 0 || nb.z >= ubo.Nz - 1) {
            force.z = lattice.z - nb.z;
        }
        distance = min(distance, length(vec3(nb + 0.5f) - pos));
    }

    return length(force) > 1e-6 && distance < 1.0f ? normalize(force) : vec3(0.0f);
}

//void atomicAdd(const uint n, const float val) {
//    float old = val; while((old=atomicExchange(bfs[n], atomicExchange(bfs[n], 0.0f)+old))!=0.0f);
//}

void atomicAdd(const uint n, const float val) {
    atomicAdd(bfs[n], val);
}

void spread_force(vec3 p, vec3 Fn) {
    ivec3 lattice = ivec3(p);
    vec3 factor = p - lattice;

    for (uint a = 0; a < 8; ++a) {
        uint i = (a & 0x04u) >> 2, j=(a & 0x02u) >> 1, k = a & 0x01u;
        uint x = lattice.x + i, y = lattice.y + j, z = lattice.z + k;
        uint n = x + (y + z * ubo.Ny) * ubo.Nx;
        const float d = (1.0f-abs(factor.x-float(i)))*(1.0f-abs(factor.y-float(j)))*(1.0f-abs(factor.z-float(k)));
        atomicAdd(            uint(n), Fn.x*d); //atomic_add_f(&F[                  n], Fn.x*d); // F[                 n] += Fn.x*d;
        atomicAdd(   ubo.Nxyz+uint(n), Fn.y*d); //atomic_add_f(&F[   ubo.Nxyz+(uint)n], Fn.y*d); // F[    def_N+(ulong)n] += Fn.y*d;
        atomicAdd(2u*ubo.Nxyz+uint(n), Fn.z*d); //atomic_add_f(&F[2u*ubo.Nxyz+(uint)n], Fn.z*d); // F[2ul*def_N+(ulong)n] += Fn.z*d;
    }
}

//void spread_force(vec3 p, vec3 Fn) {
//    const float xa=p.x-0.5f+1.5f*float(ubo.Nx), ya=p.y-0.5f+1.5f*float(ubo.Ny), za=p.z-0.5f+1.5f*float(ubo.Nz); // subtract lattice offsets
//    const uint xb=uint(xa), yb=uint(ya), zb=uint(za); // integer casting to find bottom left corner
//    const float x1=xa-float(xb), y1=ya-float(yb), z1=za-float(zb); // calculate interpolation factors
//    for(uint c=0u; c<8u; c++) { // count over eight corner points
//        const uint i=(c&0x04u)>>2, j=(c&0x02u)>>1, k=c&0x01u; // disassemble c into corner indices ijk
//        const uint x=(xb+i)%ubo.Nx, y=(yb+j)%ubo.Ny, z=(zb+k)%ubo.Nz; // calculate corner lattice positions
//        const uint n = uint(x)+uint(y+z*ubo.Ny)*uint(ubo.Nx); // calculate lattice linear index
//        const float d = (1.0f-abs(x1-float(i)))*(1.0f-abs(y1-float(j)))*(1.0f-abs(z1-float(k))); // force spreading
//        atomicAdd(bfs[            uint(n)], 0.01f*Fn.x*d); //atomic_add_f(&F[                  n], Fn.x*d); // F[                 n] += Fn.x*d;
//        atomicAdd(bfs[   ubo.Nxyz+uint(n)], 0.01f*Fn.y*d); //atomic_add_f(&F[   ubo.Nxyz+(uint)n], Fn.y*d); // F[    def_N+(ulong)n] += Fn.y*d;
//        atomicAdd(bfs[2u*ubo.Nxyz+uint(n)], 0.01f*Fn.z*d); //atomic_add_f(&F[2u*ubo.Nxyz+(uint)n], Fn.z*d); // F[2ul*def_N+(ulong)n] += Fn.z*d;
//    }
//}

void main() 
{
    uvec3 globalSize = gl_NumWorkGroups * gl_WorkGroupSize;
    uint index = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x;
    if (index >= ubo.particleCount) return;

    Particle particle = particles[index];
    
    vec3 p0 = particle.position.xyz;// cache particle position

    if(ubo.particleRho != 1.0f) { // FORCE_FILED
		const float drho = ubo.particleRho-1.0f; // density difference leads to particle buoyancy
		vec3 Fn = vec3(ubo.fx*drho, ubo.fy*drho, ubo.fz*drho); // F = F_p+F_f = (m_p-m_f)*g = (rho_p-rho_f)*g*V
		spread_force(p0, Fn); // do force spreading
	}

    const vec3 p1 = p0;
    vec3 un = interpolate_u(p1); // trilinear interpolation of velocity at point p
    un = (un + length(un) * particle_boundary_force(p1));
    const vec3 p = p0 + un; // advect particles
    particles[index].position = vec4(p, 0.0f);
}